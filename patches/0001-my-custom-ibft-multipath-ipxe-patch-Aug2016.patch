diff --git a/src/arch/x86/interface/pcbios/int13.c b/src/arch/x86/interface/pcbios/int13.c
index 6f16904..2f604e1 100644
--- a/src/arch/x86/interface/pcbios/int13.c
+++ b/src/arch/x86/interface/pcbios/int13.c
@@ -1960,7 +1960,7 @@ static int int13_describe ( unsigned int drive ) {
 		return rc;
 
 	/* Clear table */
-	memset ( &xbftab, 0, sizeof ( xbftab ) );
+//	memset ( &xbftab, 0, sizeof ( xbftab ) );
 
 	/* Fill in common parameters */
 	strncpy ( xbftab.acpi.oem_id, "FENSYS",
diff --git a/src/drivers/block/ibft.c b/src/drivers/block/ibft.c
index 91a808d..8b9a612 100644
--- a/src/drivers/block/ibft.c
+++ b/src/drivers/block/ibft.c
@@ -37,6 +37,8 @@ FILE_LICENCE ( BSD2 );
 #include <ipxe/in.h>
 #include <ipxe/netdevice.h>
 #include <ipxe/ethernet.h>
+#include <ipxe/ip.h>
+#include <ipxe/ipv6.h>
 #include <ipxe/vlan.h>
 #include <ipxe/dhcp.h>
 #include <ipxe/iscsi.h>
@@ -62,10 +64,14 @@ struct ipxe_ibft {
 	struct ibft_table table;
 	/** The Initiator section */
 	struct ibft_initiator initiator __attribute__ (( aligned ( 16 ) ));
-	/** The NIC section */
-	struct ibft_nic nic __attribute__ (( aligned ( 16 ) ));
-	/** The Target section */
-	struct ibft_target target __attribute__ (( aligned ( 16 ) ));
+	/** The 1. NIC section */
+	struct ibft_nic nic0 __attribute__ (( aligned ( 16 ) ));
+	/** The 1. Target section */
+	struct ibft_target target0 __attribute__ (( aligned ( 16 ) ));
+	/** The 2. NIC section */
+	struct ibft_nic nic1 __attribute__ (( aligned ( 16 ) ));
+	/** The 2. Target section */
+	struct ibft_target target1 __attribute__ (( aligned ( 16 ) ));
 	/** Strings block */
 	char strings[0];
 } __attribute__ (( packed, aligned ( 16 ) ));
@@ -85,6 +91,14 @@ struct ibft_strings {
 	size_t len;
 };
 
+static int ibft_ipaddr_is_ipv6 ( struct ibft_ipaddr *ipaddr )
+{
+	uint8_t prefix[12] = { 0, 0, 0, 0, 0, 0,
+			       0, 0, 0, 0, 0xff, 0xff };
+	return (memcmp(ipaddr->raw, &prefix, sizeof (prefix) ));
+}
+
+
 /**
  * Fill in an IP address field within iBFT
  *
@@ -94,8 +108,9 @@ struct ibft_strings {
 static void ibft_set_ipaddr ( struct ibft_ipaddr *ipaddr, struct in_addr in ) {
 	memset ( ipaddr, 0, sizeof ( *ipaddr ) );
 	if ( in.s_addr ) {
-		ipaddr->in = in;
-		ipaddr->ones = 0xffff;
+		ipaddr->in.in = in;
+		ipaddr->in.ones = 0xffff;
+
 	}
 }
 
@@ -121,6 +136,41 @@ static void ibft_set_ipaddr_setting ( struct settings *settings,
 }
 
 /**
+ * Fill in an IPv6 address field within iBFT
+ *
+ *  @ v ipaddr		IP address field
+ *  @ v in6		IPv6 address
+ */
+static void ibft_set_ip6addr ( struct ibft_ipaddr *ipaddr,
+			       struct in6_addr in6 ) {
+	memset ( ipaddr, 0, sizeof ( *ipaddr ) );
+	if ( in6.s6_addr ) {
+		ipaddr->in6 = in6;
+	}
+}
+
+/**
+ * Fill in an IPv6 address within iBFT from configuration setting
+ *
+ *  @ v settings		Parent settings block, or NULL
+ *  @ v ipaddr		address field
+ *  @ v setting		Configuration setting
+ *  @ v count		Maximum number of IP addresses
+ */
+static void ibft_set_ip6addr_setting ( struct settings *settings,
+				       struct ibft_ipaddr *ipaddr,
+				       const struct setting *setting,
+				       unsigned int count ) {
+	struct in6_addr in6[count];
+	unsigned int i;
+
+	fetch_ipv6_array_setting ( settings, setting, in6, count );
+	for ( i = 0 ; i < count ; i++ ) {
+		ibft_set_ip6addr ( &ipaddr[i], in6[i] );
+	}
+}
+
+/**
  * Read IP address from iBFT (for debugging)
  *
  * @v strings		iBFT string block descriptor
@@ -128,7 +178,10 @@ static void ibft_set_ipaddr_setting ( struct settings *settings,
  * @ret ipaddr		IP address string
  */
 static const char * ibft_ipaddr ( struct ibft_ipaddr *ipaddr ) {
-	return inet_ntoa ( ipaddr->in );
+	if ( ibft_ipaddr_is_ipv6(ipaddr) )
+		return inet6_ntoa( &ipaddr->in6 );
+	else
+		return inet_ntoa ( ipaddr->in.in );
 }
 
 /**
@@ -222,74 +275,189 @@ static const char * ibft_string ( struct ibft_strings *strings,
 }
 
 /**
- * Fill in NIC portion of iBFT
+ * Fill in IPv4 specific parts of the NIC portion of iBFT
  *
  * @v nic		NIC portion of iBFT
  * @v strings		iBFT string block descriptor
  * @v netdev		Network device
  * @ret rc		Return status code
+ *  @ v dest           IPv4 target address
+ *  @ ret netdev               Return network device
  */
-static int ibft_fill_nic ( struct ibft_nic *nic,
-			   struct ibft_strings *strings,
-			   struct net_device *netdev ) {
-	struct ll_protocol *ll_protocol = netdev->ll_protocol;
-	struct in_addr netmask_addr = { 0 };
-	unsigned int netmask_count = 0;
-	struct settings *parent = netdev_settings ( netdev );
-	struct settings *origin;
-	int rc;
 
-	/* Fill in common header */
-	nic->header.structure_id = IBFT_STRUCTURE_ID_NIC;
-	nic->header.version = 1;
-	nic->header.length = cpu_to_le16 ( sizeof ( *nic ) );
-	nic->header.flags = ( IBFT_FL_NIC_BLOCK_VALID |
-			      IBFT_FL_NIC_FIRMWARE_BOOT_SELECTED );
+static struct net_device * ibft_fill_nic_ipv4 ( struct ibft_nic *nic,
+                                                struct ipv4_miniroute *route4 ) {
+        struct settings *parent;
+        struct settings *origin;
+        struct in_addr netmask_addr = { 0 };
+        unsigned int netmask_count = 0;
 
 	/* Determine origin of IP address */
+        parent = netdev_settings(route4->netdev);
 	fetch_setting ( parent, &ip_setting, &origin, NULL, NULL, 0 );
 	nic->origin = ( ( origin == parent ) ?
 			IBFT_NIC_ORIGIN_MANUAL : IBFT_NIC_ORIGIN_DHCP );
-	DBG ( "iBFT NIC origin = %d\n", nic->origin );
+
+        DBG ( "iBFT NIC[%d] origin = %d\n",
+              nic->header.index, nic->origin );
 
 	/* Extract values from configuration settings */
-	ibft_set_ipaddr_setting ( parent, &nic->ip_address, &ip_setting, 1 );
-	DBG ( "iBFT NIC IP = %s\n", ibft_ipaddr ( &nic->ip_address ) );
-	ibft_set_ipaddr_setting ( parent, &nic->gateway, &gateway_setting, 1 );
-	DBG ( "iBFT NIC gateway = %s\n", ibft_ipaddr ( &nic->gateway ) );
-	ibft_set_ipaddr_setting ( NULL, &nic->dns[0], &dns_setting,
+        fetch_setting ( parent, &ip_setting, &origin, NULL, NULL, 0 );
+
+        ibft_set_ipaddr ( &nic->ip_address, route4->address );
+        DBG ( "iBFT NIC[%d] IP = %s\n", nic->header.index,
+               ibft_ipaddr ( &nic->ip_address ) );
+
+        ibft_set_ipaddr ( &nic->gateway, route4->gateway );
+        DBG ( "iBFT NIC[%d] gateway = %s\n", nic->header.index,
+               ibft_ipaddr ( &nic->gateway ) );
+
+        ibft_set_ipaddr_setting ( NULL, &nic->dns[0], &dns_setting,
 				  ( sizeof ( nic->dns ) /
 				    sizeof ( nic->dns[0] ) ) );
 	ibft_set_ipaddr_setting ( parent, &nic->dhcp, &dhcp_server_setting, 1 );
-	DBG ( "iBFT NIC DNS = %s", ibft_ipaddr ( &nic->dns[0] ) );
+        DBG ( "iBFT NIC[%d] DNS = %s", nic->header.index,
+              ibft_ipaddr ( &nic->dns[0] ) );
+
 	DBG ( ", %s\n", ibft_ipaddr ( &nic->dns[1] ) );
-	if ( ( rc = ibft_set_string_setting ( NULL, strings, &nic->hostname,
-					      &hostname_setting ) ) != 0 )
-		return rc;
-	DBG ( "iBFT NIC hostname = %s\n",
-	      ibft_string ( strings, &nic->hostname ) );
 
 	/* Derive subnet mask prefix from subnet mask */
-	fetch_ipv4_setting ( parent, &netmask_setting, &netmask_addr );
+        netmask_addr = route4->netmask;
 	while ( netmask_addr.s_addr ) {
 		if ( netmask_addr.s_addr & 0x1 )
 			netmask_count++;
 		netmask_addr.s_addr >>= 1;
 	}
 	nic->subnet_mask_prefix = netmask_count;
-	DBG ( "iBFT NIC subnet = /%d\n", nic->subnet_mask_prefix );
+
+       DBG ( "iBFT NIC[%d] subnet = /%d\n", nic->header.index,
+             nic->subnet_mask_prefix );
+
+       return route4->netdev;
+}
+
+/**
+ * Fill in IPv6 specific parts of the NIC portion of iBFT
+ *
+ * @v nic              NIC portion of iBFT
+ * @v dest             IPv6 destination address
+ * @ret rc             Return network device
+ */
+static struct net_device * ibft_fill_nic_ipv6 ( struct ibft_nic *nic,
+                                                struct ipv6_miniroute *route6,
+                                                struct in6_addr * router ) {
+        struct settings *parent;
+        struct settings *origin;
+ 
+        parent = netdev_settings(route6->netdev);
+        fetch_setting ( parent, &ip6_setting, &origin, NULL, NULL, 0 );
+        nic->origin = ( ( origin == parent ) ?
+                        IBFT_NIC_ORIGIN_MANUAL : IBFT_NIC_ORIGIN_DHCP );
+        DBG ( "iBFT NIC origin = %d\n", nic->origin );
+
+        /* Extract values from configuration settings */
+        ibft_set_ip6addr ( &nic->ip_address, route6->address );
+        DBG ( "iBFT NIC IP = %s\n", ibft_ipaddr ( &nic->ip_address ) );
+        ibft_set_ip6addr ( &nic->gateway, *router );
+        DBG ( "iBFT NIC gateway = %s\n", ibft_ipaddr ( &nic->gateway ) );
+        ibft_set_ip6addr_setting ( NULL, &nic->dns[0], &dns6_setting,
+                                   ( sizeof ( nic->dns ) /
+                                     sizeof ( nic->dns[0] ) ) );
+        DBG ( "iBFT NIC DNS = %s", ibft_ipaddr ( &nic->dns[0] ) );
+        DBG ( ", %s\n", ibft_ipaddr ( &nic->dns[1] ) );
+        nic->subnet_mask_prefix = route6->prefix_len;
+        DBG ( "iBFT NIC subnet = /%d\n", nic->subnet_mask_prefix );
+
+        return route6->netdev;
+}
+
+/**
+ * Fill in NIC portion of iBFT
+ *
+ * @v nic              NIC portion of iBFT
+ * @v strings          iBFT string block descriptor
+ * @v netdev           Network device
+ * @ret rc             Return status code
+ */
+ static int ibft_fill_nic ( struct ibft_nic *nic,
+                           struct ibft_strings *strings,
+                           struct iscsi_session *iscsi,
+                           int nic_index ) {
+
+        struct sockaddr_in *sin_target =
+                ( struct sockaddr_in * ) &iscsi->target_sockaddr;
+        struct sockaddr_in6 *sin6_target =
+                ( struct sockaddr_in6 * ) &iscsi->target_sockaddr;
+       struct ipv4_miniroute * route4 = NULL;
+       struct ipv6_miniroute * route6 = NULL;
+       struct in6_addr *router6;
+        struct net_device *netdev;
+        struct ll_protocol *ll_protocol;
+        int rc;
+
+       if (sin_target->sin_family == AF_INET) {
+               struct in_addr router4 = sin_target->sin_addr;
+               route4 = ipv4_route(sin_target->sin_scope_id, &router4);
+               if (!route4)
+                       return -EHOSTUNREACH;
+               if (nic->header.flags & IBFT_FL_NIC_BLOCK_VALID) {
+                       struct ibft_ipaddr tmp;
+                       ibft_set_ipaddr( &tmp, route4->address );
+                       if (memcmp(&nic->ip_address, &tmp, sizeof(tmp)))
+                               return -EBUSY;
+               }
+       } else if (sin6_target->sin6_family == AF_INET6) {
+               router6 = &sin6_target->sin6_addr;
+               route6 = ipv6_route(sin6_target->sin6_scope_id, &router6);
+               if (!route6)
+                       return -EHOSTUNREACH;
+               if (nic->header.flags & IBFT_FL_NIC_BLOCK_VALID) {
+                       struct ibft_ipaddr tmp;
+                       ibft_set_ip6addr( &tmp, route6->address );
+                       if (memcmp(&nic->ip_address, &tmp, sizeof(tmp)))
+                               return -EBUSY;
+               }
+       } else
+               return -EPROTONOSUPPORT;
+
+        /* Fill in common header */
+        nic->header.structure_id = IBFT_STRUCTURE_ID_NIC;
+        nic->header.version = 1;
+        nic->header.index = nic_index;
+        nic->header.length = cpu_to_le16 ( sizeof ( *nic ) );
+        nic->header.flags = ( IBFT_FL_NIC_BLOCK_VALID |
+                              IBFT_FL_NIC_FIRMWARE_BOOT_SELECTED );
+ 
+        if (sin_target->sin_family == AF_INET)
+                netdev = ibft_fill_nic_ipv4( nic, route4 );
+        else
+                netdev = ibft_fill_nic_ipv6( nic, route6, router6 );
 
 	/* Extract values from net-device configuration */
 	nic->vlan = cpu_to_le16 ( vlan_tag ( netdev ) );
-	DBG ( "iBFT NIC VLAN = %02x\n", le16_to_cpu ( nic->vlan ) );
+        DBG ( "iBFT NIC[%d] VLAN = %02x\n",
+              nic->header.index, le16_to_cpu ( nic->vlan ) );
+
+        ll_protocol = netdev->ll_protocol;
 	if ( ( rc = ll_protocol->eth_addr ( netdev->ll_addr,
 					    nic->mac_address ) ) != 0 ) {
 		DBG ( "Could not determine iBFT MAC: %s\n", strerror ( rc ) );
 		return rc;
 	}
-	DBG ( "iBFT NIC MAC = %s\n", eth_ntoa ( nic->mac_address ) );
+
+        DBG ( "iBFT NIC[%d] MAC = %s\n",
+              nic->header.index, eth_ntoa ( nic->mac_address ) );
+
 	nic->pci_bus_dev_func = cpu_to_le16 ( netdev->dev->desc.location );
-	DBG ( "iBFT NIC PCI = %04x\n", le16_to_cpu ( nic->pci_bus_dev_func ) );
+        DBG ( "iBFT NIC[%d] PCI = %04x\n",
+              nic->header.index, le16_to_cpu ( nic->pci_bus_dev_func ) );
+
+        if ( ( rc = ibft_set_string_setting ( NULL, strings, &nic->hostname,
+                                             &hostname_setting ) ) != 0 )
+                return rc;
+        DBG ( "iBFT NIC[%d] hostname = %s\n",
+              nic->header.index,
+              ibft_string ( strings, &nic->hostname ) );
 
 	return 0;
 }
@@ -347,12 +515,15 @@ static int ibft_fill_target_chap ( struct ibft_target *target,
 	if ( ( rc = ibft_set_string ( strings, &target->chap_name,
 				      iscsi->initiator_username ) ) != 0 )
 		return rc;
-	DBG ( "iBFT target username = %s\n",
+	DBG ( "iBFT target[%d] username = %s\n",
+	      target->header.index,
 	      ibft_string ( strings, &target->chap_name ) );
 	if ( ( rc = ibft_set_string ( strings, &target->chap_secret,
 				      iscsi->initiator_password ) ) != 0 )
 		return rc;
-	DBG ( "iBFT target password = <redacted>\n" );
+	DBG ( "iBFT target[%d] password = <redacted>\n",
+		target->header.index );
+
 
 	return 0;
 }
@@ -382,12 +553,14 @@ static int ibft_fill_target_reverse_chap ( struct ibft_target *target,
 	if ( ( rc = ibft_set_string ( strings, &target->reverse_chap_name,
 				      iscsi->target_username ) ) != 0 )
 		return rc;
-	DBG ( "iBFT target reverse username = %s\n",
+	DBG ( "iBFT target[%d] reverse username = %s\n",
+	      target->header.index,
 	      ibft_string ( strings, &target->chap_name ) );
 	if ( ( rc = ibft_set_string ( strings, &target->reverse_chap_secret,
 				      iscsi->target_password ) ) != 0 )
 		return rc;
-	DBG ( "iBFT target reverse password = <redacted>\n" );
+	DBG ( "iBFT target[%d] reverse password = <redacted>\n",
+		target->header.index );
 
 	return 0;
 }
@@ -402,30 +575,68 @@ static int ibft_fill_target_reverse_chap ( struct ibft_target *target,
  */
 static int ibft_fill_target ( struct ibft_target *target,
 			      struct ibft_strings *strings,
-			      struct iscsi_session *iscsi ) {
+			      struct iscsi_session *iscsi,
+			      int target_index, int nic_index ) {
 	struct sockaddr_in *sin_target =
 		( struct sockaddr_in * ) &iscsi->target_sockaddr;
+	struct sockaddr_in6 *sin6_target =
+		( struct sockaddr_in6 * ) &iscsi->target_sockaddr;
 	int rc;
 
+	if (sin_target->sin_family == AF_INET) {
+		if (target->header.flags & IBFT_FL_TARGET_BLOCK_VALID) {
+			struct ibft_ipaddr tmp;
+			ibft_set_ipaddr ( &tmp, sin_target->sin_addr );
+			if ( memcmp( &target->ip_address, &tmp, sizeof(tmp) ))
+				return -EBUSY;
+		}
+	} else if (sin6_target->sin6_family == AF_INET6) {
+		if (target->header.flags & IBFT_FL_TARGET_BLOCK_VALID) {
+			struct ibft_ipaddr tmp;
+			ibft_set_ip6addr ( &tmp, sin6_target->sin6_addr );
+			if ( memcmp( &target->ip_address, &tmp, sizeof(tmp) ))
+				return -EBUSY;
+		}
+	} else {
+
+		DBG ( "iBFT invalid IP address type %d\n",
+		      sin6_target->sin6_family );
+		return -EPROTONOSUPPORT;
+	}
+
 	/* Fill in common header */
 	target->header.structure_id = IBFT_STRUCTURE_ID_TARGET;
 	target->header.version = 1;
+	target->header.index = target_index;
 	target->header.length = cpu_to_le16 ( sizeof ( *target ) );
 	target->header.flags = ( IBFT_FL_TARGET_BLOCK_VALID |
 				 IBFT_FL_TARGET_FIRMWARE_BOOT_SELECTED );
 
+	target->nic_association = nic_index;
 	/* Fill in Target values */
-	ibft_set_ipaddr ( &target->ip_address, sin_target->sin_addr );
-	DBG ( "iBFT target IP = %s\n", ibft_ipaddr ( &target->ip_address ) );
-	target->socket = cpu_to_le16 ( ntohs ( sin_target->sin_port ) );
-	DBG ( "iBFT target port = %d\n", target->socket );
+	if (sin_target->sin_family == AF_INET) {
+		ibft_set_ipaddr ( &target->ip_address, sin_target->sin_addr );
+		DBG ( "iBFT target[%d] IP = %s\n", target_index,
+		      ibft_ipaddr ( &target->ip_address ) );
+		target->socket = cpu_to_le16 ( ntohs ( sin_target->sin_port ) );
+		DBG ( "iBFT target[%d] port = %d\n", target_index,
+		      target->socket );
+	} else {
+		ibft_set_ip6addr ( &target->ip_address, sin6_target->sin6_addr );
+		DBG ( "iBFT target[%d] IP = %s\n", target_index,
+		      ibft_ipaddr ( &target->ip_address ) );
+		target->socket = cpu_to_le16 ( ntohs ( sin6_target->sin6_port ) );
+		DBG ( "iBFT target[%d] port = %d\n", target_index, target->socket );
+	}
+
 	memcpy ( &target->boot_lun, &iscsi->lun, sizeof ( target->boot_lun ) );
-	DBG ( "iBFT target boot LUN = " SCSI_LUN_FORMAT "\n",
-	      SCSI_LUN_DATA ( target->boot_lun ) );
+	DBG ( "iBFT target[%d] boot LUN = " SCSI_LUN_FORMAT "\n",
+	      target_index, SCSI_LUN_DATA ( target->boot_lun ) );
+
 	if ( ( rc = ibft_set_string ( strings, &target->target_name,
 				      iscsi->target_iqn ) ) != 0 )
 		return rc;
-	DBG ( "iBFT target name = %s\n",
+	DBG ( "iBFT target[%d] name = %s\n", target_index,
 	      ibft_string ( strings, &target->target_name ) );
 	if ( ( rc = ibft_fill_target_chap ( target, strings, iscsi ) ) != 0 )
 		return rc;
@@ -454,20 +665,11 @@ int ibft_describe ( struct iscsi_session *iscsi,
 		.offset = offsetof ( typeof ( *ibft ), strings ),
 		.len = len,
 	};
-	struct net_device *netdev;
+	int nic_index = 0;
 	int rc;
 
-	/* Ugly hack.  Now that we have a generic interface mechanism
-	 * that can support ioctls, we can potentially eliminate this.
-	 */
-	netdev = last_opened_netdev();
-	if ( ! netdev ) {
-		DBGC ( iscsi, "iSCSI %p cannot guess network device\n",
-		       iscsi );
-		return -ENODEV;
-	}
-
 	/* Fill in ACPI header */
+	DBG ( "iBFT table %p\n", ibft);
 	ibft->table.acpi.signature = cpu_to_le32 ( IBFT_SIG );
 	ibft->table.acpi.length = cpu_to_le32 ( len );
 	ibft->table.acpi.revision = 1;
@@ -480,19 +682,35 @@ int ibft_describe ( struct iscsi_session *iscsi,
 	ibft->table.control.initiator =
 		cpu_to_le16 ( offsetof ( typeof ( *ibft ), initiator ) );
 	ibft->table.control.nic_0 =
-		cpu_to_le16 ( offsetof ( typeof ( *ibft ), nic ) );
+		cpu_to_le16 ( offsetof ( typeof ( *ibft ), nic0 ) );
+
 	ibft->table.control.target_0 =
-		cpu_to_le16 ( offsetof ( typeof ( *ibft ), target ) );
+		cpu_to_le16 ( offsetof ( typeof ( *ibft ), target0 ) );
+	ibft->table.control.nic_1 =
+		cpu_to_le16 ( offsetof ( typeof ( *ibft ), nic1 ) );
+	ibft->table.control.target_1 =
+		cpu_to_le16 ( offsetof ( typeof ( *ibft ), target1 ) );
 
-	/* Fill in NIC, Initiator and Target blocks */
-	if ( ( rc = ibft_fill_nic ( &ibft->nic, &strings, netdev ) ) != 0 )
-		return rc;
+	/* Fill in Initiator block */
 	if ( ( rc = ibft_fill_initiator ( &ibft->initiator, &strings,
 					  iscsi ) ) != 0 )
 		return rc;
-	if ( ( rc = ibft_fill_target ( &ibft->target, &strings,
-				       iscsi ) ) != 0 )
+
+	/* Fill in NIC blocks */
+	rc = ibft_fill_nic ( &ibft->nic0, &strings, iscsi, nic_index );
+	if ( rc == -EBUSY ) {
+		nic_index++;
+		rc = ibft_fill_nic( &ibft->nic1, &strings, iscsi, nic_index );
+	}
+	if ( rc != 0 )
 		return rc;
 
-	return 0;
+	/* Fill in target blocks */
+	rc = ibft_fill_target ( &ibft->target0, &strings, iscsi,
+				0, nic_index );
+	if ( rc == -EBUSY ) {
+		rc = ibft_fill_target ( &ibft->target1, &strings,
+					iscsi, 1, nic_index );
+	}
+	return rc;
 }
diff --git a/src/include/ipxe/ibft.h b/src/include/ipxe/ibft.h
index 35f1510..756197a 100644
--- a/src/include/ipxe/ibft.h
+++ b/src/include/ipxe/ibft.h
@@ -63,14 +63,23 @@ struct ibft_string {
 	ibft_off_t offset;
 } __attribute__ (( packed ));
 
-/** An IP address within the iBFT */
-struct ibft_ipaddr {
+/** iBFT IPv4 address representation */
+struct ibft_inaddr {
 	/** Reserved; must be zero */
 	uint16_t zeroes[5];
 	/** Must be 0xffff if IPv4 address is present, otherwise zero */
 	uint16_t ones;
 	/** The IPv4 address, or zero if not present */
 	struct in_addr in;
+};
+
+/** An IP address within the iBFT */
+struct ibft_ipaddr {
+	union {
+		struct ibft_inaddr in;
+		struct in6_addr in6;
+		uint8_t raw[16];
+	};
 } __attribute__ (( packed ));
 
 /**
diff --git a/src/include/ipxe/ip.h b/src/include/ipxe/ip.h
index 285be6d..787aca6 100644
--- a/src/include/ipxe/ip.h
+++ b/src/include/ipxe/ip.h
@@ -75,6 +75,8 @@ extern struct list_head ipv4_miniroutes;
 extern struct net_protocol ipv4_protocol __net_protocol;
 
 extern int ipv4_has_any_addr ( struct net_device *netdev );
+//extern struct ipv4_miniroute * ipv4_route ( struct in_addr *dest );
+extern struct ipv4_miniroute * ipv4_route ( unsigned int scope_id, struct in_addr *dest );
 extern int parse_ipv4_setting ( const struct setting_type *type,
 				const char *value, void *buf, size_t len );
 extern int format_ipv4_setting ( const struct setting_type *type,
diff --git a/src/include/ipxe/ipv6.h b/src/include/ipxe/ipv6.h
index 4dd43f1..7cca950 100644
--- a/src/include/ipxe/ipv6.h
+++ b/src/include/ipxe/ipv6.h
@@ -308,5 +308,10 @@ extern int parse_ipv6_setting ( const struct setting_type *type,
 extern int format_ipv6_setting ( const struct setting_type *type,
 				 const void *raw, size_t raw_len, char *buf,
 				 size_t len );
+extern int ipv6_ll_route ( struct net_device *netdev );
+struct ipv6_miniroute * ipv6_miniroute ( struct net_device *netdev,
+ 					 struct in6_addr *address );
+extern struct ipv6_miniroute * ipv6_route ( unsigned int scope_id,
+					    struct in6_addr **dest );
 
 #endif /* _IPXE_IPV6_H */
diff --git a/src/net/ipv4.c b/src/net/ipv4.c
index b4148d8..d8b4468 100644
--- a/src/net/ipv4.c
+++ b/src/net/ipv4.c
@@ -147,7 +147,7 @@ static void del_ipv4_miniroute ( struct ipv4_miniroute *miniroute ) {
  * If the route requires use of a gateway, the next hop destination
  * address will be overwritten with the gateway address.
  */
-static struct ipv4_miniroute * ipv4_route ( unsigned int scope_id,
+struct ipv4_miniroute * ipv4_route ( unsigned int scope_id,
 					    struct in_addr *dest ) {
 	struct ipv4_miniroute *miniroute;
 
